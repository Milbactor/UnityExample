//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using UnityEngine;


namespace AssemblyCSharp
{
	public class StatusEffectManager3 : GeekBehaviour
	{
		//int is samudaiproperties enum
		public Dictionary <int, dynamic > baseValues = new Dictionary< int , dynamic>();
		public Dictionary< int, List<StatusEffect3> > statusEffects = new Dictionary<int, List<StatusEffect3>>();
		
		void Start()
		{
			base.Start();
		}
		
		void Update()
		{
			base.Update ();
		}
		
		public void registerBaseValue(StatusEffect3 effect, SamudaiStatusProperties key, object value )
		{
			GeekTools.Log("registerBase value for key [" + key + "] = " + value );
			
			if( getEarliestStatusEffectingProperty( (int) key ) == effect ){	
				baseValues[ (int)key ] = value;
			}
		}
		
		public int valueModifiers( SamudaiStatusProperties key )
		{
			return statusEffects[(int) key ].Count ;
		}
		
		public object getBaseValue( SamudaiStatusProperties key )
		{
			GeekTools.Log ("setting to baseValue [ " + key + " ] : " + baseValues[ (int) key ]);
			return baseValues[ (int) key ];
		}
		
		public void Register( StatusEffect3 effect )
		{
			List< int> propertyKeys = new List<int>( effect.propertyValues.Keys );
			for(int i = 0; i < propertyKeys.Count; i++)
			{
				int property = (int) propertyKeys[i];
				
				if(statusEffects.ContainsKey( property ) == false ) statusEffects[property ] = new List<StatusEffect3>();
				statusEffects[property].Add( effect );
				
				//print ("adding " + effect + " to list [ " + property + " ]" );
			}
		}
		
		public bool containsSameType (Type type)
		{
			int count = 0;
			foreach(List<StatusEffect3> statussen in statusEffects.Values )
			{
				foreach( StatusEffect3 effect in statussen )
				{
					if( effect.GetType() == type ) count++;
				}
				
				if( count > 1 ) return false;
			}
			
			if( count <= 1 ) return true;
			return false;
		}
		
		public void RemoveEffect( StatusEffect3 effect )
		{
			List< int> propertyKeys = new List<int>( effect.propertyValues.Keys );
			for(int i = 0; i < propertyKeys.Count; i++)
			{
				int property = (int)propertyKeys[i];
				
				//print ("removing " + effect + " from list [ " + property + " ]" );
				//print ("statusEffects[" + property + "] removing effect: " + effect );
				//print ("count before: " + statusEffects[ property ].Count ); 
				statusEffects[property].Remove( effect );
				//print ("count after: " + statusEffects[ property ].Count );
			}
		}
		
		public StatusEffect3 getEarliestStatusEffectingProperty( int property )
		{
			if( statusEffects.ContainsKey(property) == false || statusEffects[property].Count == 0 ) return null;
		
			return statusEffects[ property][0];
		}
	}
}

