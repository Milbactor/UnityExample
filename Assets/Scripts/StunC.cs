//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18449
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;


namespace AssemblyCSharp
{
	public class StunC : StatusEffect3
	{
		public static string M_ON_STUN_START = "M_ON_STUN_START";
		public static string M_ON_STUN_END = "M_ON_STUN_END";
		
		private PlayerC player;
		private GeekPhysicsC physics;
		float prevGravity = 0;
		
		void Start()
		{
			player = GetComponent<PlayerC>();
			physics = GetComponent<GeekPhysicsC>();
		
			propertyValues.Add( (int)SamudaiStatusProperties.INPUT_ENABLED, player.inputEnabled );
			propertyValues.Add( (int)SamudaiStatusProperties.GRAVITY, physics.gravity );
		
			base.Start();
			
			if( manager.getEarliestStatusEffectingProperty( (int)SamudaiStatusProperties.INPUT_ENABLED ) == this ) {
				manager.baseValues[ (int)SamudaiStatusProperties.INPUT_ENABLED ] = player.inputEnabled;
			}
			
			if( manager.getEarliestStatusEffectingProperty( (int)SamudaiStatusProperties.GRAVITY ) == this ) {
				manager.baseValues[ (int)SamudaiStatusProperties.GRAVITY ] = physics.gravity;
			}
			
			
			timer.onElapsed += HandleonElapsed;
			rb2D.velocity = Vector2.zero;
			
			print ("adding stunC");
			prevGravity = GetComponent<GeekPhysicsC>().gravity;
			GetComponent<GeekPhysicsC>().gravity = 0;
			dispatchMessage( PlayerC.M_INPUT_DISABLE );
			
			dispatchMessage( M_ON_STUN_START );
			
			GetComponent<SpriteRenderer>().color = new Color (1f, 0.92f, 0.50f) ;
		}

		void HandleonElapsed ()
		{
			dispatchMessage( PlayerC.M_INPUT_ENABLE );
			dispatcher.dispatchMessage(M_ON_STUN_END ); //need to use dispatcher because enabled = false for some reason
			GetComponent<GeekPhysicsC>().gravity = prevGravity;
			
			print ("count stunC: " + manager.statusEffects[(int)SamudaiStatusProperties.INPUT_ENABLED].Count );
			
			if( manager.statusEffects[(int)SamudaiStatusProperties.INPUT_ENABLED ].Count <= 1){
				player.inputEnabled = (bool)manager.baseValues[ (int)SamudaiStatusProperties.INPUT_ENABLED ];
				print ("removing StunC, setting input enabled : " + (bool)manager.baseValues[ (int)SamudaiStatusProperties.INPUT_ENABLED ]);
			}
			
			if( manager.statusEffects[(int)SamudaiStatusProperties.GRAVITY ].Count <= 1)
				physics.gravity = (float)manager.baseValues[ (int)SamudaiStatusProperties.GRAVITY]; 
			
			
			GetComponent<SpriteRenderer>().color = Color.white;
			
			print ("destroy stunC");
			reset();
			Destroy( this );
		}
		
		void Update()
		{
			base.Update();

			GetComponent<PlayerC>().inputEnabled = false;
		}
		
		void OnDestroy() {
			//LOOK AT THIS LATER
			HandleonElapsed();
		}
	}
}

